<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>VAE</title>
    <link href="/2025/03/27/VAE/"/>
    <url>/2025/03/27/VAE/</url>
    
    <content type="html"><![CDATA[<h1 id="1-先来看AE（自动编码器）"><a href="#1-先来看AE（自动编码器）" class="headerlink" title="1.先来看AE（自动编码器）"></a>1.先来看AE（自动编码器）</h1><h2 id="本质是无监督学习，主要就是一个Encoder和Decoder"><a href="#本质是无监督学习，主要就是一个Encoder和Decoder" class="headerlink" title="本质是无监督学习，主要就是一个Encoder和Decoder"></a>本质是无监督学习，主要就是一个Encoder和Decoder</h2><h3 id="i-Encoder"><a href="#i-Encoder" class="headerlink" title="i.Encoder"></a>i.Encoder</h3><p>将高维数据映射到低维空间，实际上起一个降维的作用,用 <script type="math/tex">g_\theta</script> 表示Encoder的网络， <script type="math/tex">z=g_\theta(x)</script> 表示高维数据x经过网络之后产生低维的z</p><h3 id="ii-Decoder"><a href="#ii-Decoder" class="headerlink" title="ii.Decoder"></a>ii.Decoder</h3><p>从降维后的数据还原到原始数据,用 <script type="math/tex">f_\lambda</script> 表示Encoder的网络, <script type="math/tex">x^{new}=f_\lambda(x)</script></p><p>此外，还需要一个loss函数，可以简单定义为<script type="math/tex">x^{new}</script>与x的距离(L2范数)：</p><script type="math/tex; mode=display">L(\theta,\lambda)=\frac{1}{n}\sum_{i=1}^n(x^i-x^{new(i)})^2</script><h4 id="由此可见，AE可以完成一些降维、压缩、特征提取等任务"><a href="#由此可见，AE可以完成一些降维、压缩、特征提取等任务" class="headerlink" title="由此可见，AE可以完成一些降维、压缩、特征提取等任务"></a>由此可见，AE可以完成一些降维、压缩、特征提取等任务</h4><h3 id="iii-代码示例"><a href="#iii-代码示例" class="headerlink" title="iii.代码示例"></a>iii.代码示例</h3><h4 id="AE-model定义"><a href="#AE-model定义" class="headerlink" title="AE model定义"></a>AE model定义</h4><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 定义 Autoencoder 模型 用nn.Module作为父类，方便用优化器追踪梯度</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Autoencoder</span>(nn.Module):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, input_size, hidden_size</span>):        <span class="hljs-built_in">super</span>(Autoencoder, <span class="hljs-variable language_">self</span>).__init__()                <span class="hljs-comment"># 编码器</span>        <span class="hljs-variable language_">self</span>.encoder = nn.Sequential(            nn.Linear(input_size, hidden_size),            nn.ReLU()  <span class="hljs-comment"># 激活函数</span>        )        <span class="hljs-comment">#nn.linear是网络中的全连接层，第一个参数代表的是输入的二维张量的第二个size，相当于上一层神经元个数，第二个参数则是下一层神经元个数</span>        <span class="hljs-comment">#将每一个input_size维数的高维向量转化维hidden_size的低维向量</span>                <span class="hljs-comment"># 解码器</span>        <span class="hljs-variable language_">self</span>.decoder = nn.Sequential(            nn.Linear(hidden_size, input_size),            nn.Sigmoid()  <span class="hljs-comment"># 将输出范围限定在 [0, 1]</span>        )        <span class="hljs-comment">#这里要恢复到原始维数，所以参数是倒过来的</span>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):        encoded = <span class="hljs-variable language_">self</span>.encoder(x)        decoded = <span class="hljs-variable language_">self</span>.decoder(encoded)        <span class="hljs-keyword">return</span> decoded</code></pre></div><h4 id="加载数据，定义优化器、损失函数"><a href="#加载数据，定义优化器、损失函数" class="headerlink" title="加载数据，定义优化器、损失函数"></a>加载数据，定义优化器、损失函数</h4><div class="code-wrapper"><pre><code class="hljs python">X = np.random.rand(<span class="hljs-number">1000</span>, <span class="hljs-number">64</span>)  <span class="hljs-comment"># 1000 个样本，每个样本有 64 维光谱特征</span>X = torch.tensor(X, dtype=torch.float32)<span class="hljs-comment"># 创建数据加载器</span>dataset = TensorDataset(X, X)  <span class="hljs-comment"># 输入数据与输出数据相同</span>dataloader = DataLoader(dataset, batch_size=<span class="hljs-number">32</span>, shuffle=<span class="hljs-literal">True</span>)<span class="hljs-comment"># 定义模型、优化器和损失函数</span>input_size = <span class="hljs-number">64</span>hidden_size = <span class="hljs-number">32</span>  <span class="hljs-comment"># 压缩到 32 维</span>autoencoder = Autoencoder(input_size=input_size, hidden_size=hidden_size)optimizer = optim.Adam(autoencoder.parameters(), lr=<span class="hljs-number">0.001</span>)<span class="hljs-comment">#我们定义的model用了nn.Module的基类，通过.parameters就可以访问所有要训练的参数</span><span class="hljs-comment">#包括encoder和decoder二者的参数，因为二者是要一起训练的</span>criterion = nn.MSELoss()  <span class="hljs-comment"># 损失函数为均方误差</span></code></pre></div><h4 id="train"><a href="#train" class="headerlink" title="train"></a>train</h4><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 训练 Autoencoder 模型</span>num_epochs = <span class="hljs-number">50</span><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):    <span class="hljs-keyword">for</span> data, target <span class="hljs-keyword">in</span> dataloader:        optimizer.zero_grad() <span class="hljs-comment">#清空梯度</span>        output = autoencoder(data) <span class="hljs-comment">#前向传播</span>        loss = criterion(output, target)        <span class="hljs-comment">#target即为原始数据</span>        loss.backward()        <span class="hljs-comment">#反向传播</span>        optimizer.step()        <span class="hljs-comment">#step 梯度下降</span>        <span class="hljs-keyword">if</span> epoch % <span class="hljs-number">10</span> == <span class="hljs-number">0</span>:        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Epoch <span class="hljs-subst">&#123;epoch&#125;</span>, Loss: <span class="hljs-subst">&#123;loss.item()&#125;</span>&#x27;</span>)</code></pre></div><h4 id="test"><a href="#test" class="headerlink" title="test"></a>test</h4><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 使用训练好的模型进行降维和重构</span>encoded_data = autoencoder.encoder(X).detach().numpy()decoded_data = autoencoder.decoder(torch.tensor(encoded_data)).detach().numpy()</code></pre></div><h1 id="2-VAE（变分自动编码器）"><a href="#2-VAE（变分自动编码器）" class="headerlink" title="2.VAE（变分自动编码器）"></a>2.VAE（变分自动编码器）</h1><h2 id="准备知识"><a href="#准备知识" class="headerlink" title="准备知识"></a>准备知识</h2><h3 id="（1）潜在变量"><a href="#（1）潜在变量" class="headerlink" title="（1）潜在变量"></a>（1）潜在变量</h3><h3 id="（2）极大似然估计"><a href="#（2）极大似然估计" class="headerlink" title="（2）极大似然估计"></a>（2）极大似然估计</h3><h3 id="（3）KL散度"><a href="#（3）KL散度" class="headerlink" title="（3）KL散度"></a>（3）KL散度</h3><h2 id="VAE主要思想"><a href="#VAE主要思想" class="headerlink" title="VAE主要思想"></a>VAE主要思想</h2><h2 id="VAE的损失函数推导"><a href="#VAE的损失函数推导" class="headerlink" title="VAE的损失函数推导"></a>VAE的损失函数推导</h2><h2 id="采样：重参数技巧"><a href="#采样：重参数技巧" class="headerlink" title="采样：重参数技巧"></a>采样：重参数技巧</h2><h2 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h2>]]></content>
    
    
    <categories>
      
      <category>科研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VAE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GAN model学习</title>
    <link href="/2025/03/13/GAN/"/>
    <url>/2025/03/13/GAN/</url>
    
    <content type="html"><![CDATA[<h1 id="1-GAN的目标"><a href="#1-GAN的目标" class="headerlink" title="1.GAN的目标"></a>1.GAN的目标</h1><h2 id="GAN是生成模型的一种"><a href="#GAN是生成模型的一种" class="headerlink" title="GAN是生成模型的一种"></a>GAN是生成模型的一种</h2><h3 id="区分生成模型与判别模型："><a href="#区分生成模型与判别模型：" class="headerlink" title="区分生成模型与判别模型："></a>区分生成模型与判别模型：</h3><p>生成模型通常是无监督学习(事实上也有监督学习的模型)，即数据集是没有标签的，模型从数据集中学习，可以生成数据集中没有的数据；<br>判别模型很多是有监督学习，即输入是带有标签的，模型通过从数据集中学习，可以对新数据进行判别。</p><p>假定输入x,输出y 判别模型相当于是在估计条件概率分布$P(y|x)$,生成模型则是在估计联合概率分布$P(x,y)$</p><p>举个例子，输入手写数字图片集，判别模型学习的目标是对于给出的图片，可以判断是哪个数字；而生成模型的目标是生成新的数字图片</p><h2 id="GAN的目标"><a href="#GAN的目标" class="headerlink" title="GAN的目标"></a>GAN的目标</h2><h1 id="2-GAN（生成对抗网络）的思想："><a href="#2-GAN（生成对抗网络）的思想：" class="headerlink" title="2.GAN（生成对抗网络）的思想："></a>2.GAN（生成对抗网络）的思想：</h1><h2 id="a-由两个模型组成"><a href="#a-由两个模型组成" class="headerlink" title="a. 由两个模型组成"></a>a. 由两个模型组成</h2><p>生成器G(Generator)<br>鉴别器D(Discriminator)</p><h2 id="b-对抗思想"><a href="#b-对抗思想" class="headerlink" title="b.对抗思想"></a>b.对抗思想</h2><p>生成器努力生成能够欺骗鉴别器的样本，而鉴别器努力识别生成的样本是真是假(即是来自数据集还是有生成器生成的),<br>我们希望达到的目标是：鉴别器无法区分生成器生成的样本到底是真是假</p><h2 id="c-生成器和鉴别器之间的关系是一种博弈"><a href="#c-生成器和鉴别器之间的关系是一种博弈" class="headerlink" title="c.生成器和鉴别器之间的关系是一种博弈"></a>c.生成器和鉴别器之间的关系是一种博弈</h2><h3 id="i-零和博弈"><a href="#i-零和博弈" class="headerlink" title="i.零和博弈"></a>i.零和博弈</h3><h3 id="ii-纳什均衡"><a href="#ii-纳什均衡" class="headerlink" title="ii.纳什均衡"></a>ii.纳什均衡</h3><h1 id="3-GAN的训练过程："><a href="#3-GAN的训练过程：" class="headerlink" title="3.GAN的训练过程："></a>3.GAN的训练过程：</h1><p>以pytorch代码为例：(判别器选择了简单的MLP)</p><h3 id="首先是一个很简单的判别器，通过简单的MLP输出（0，1-之间的一个概率作为outputs，targets即为真实标签，交叉熵损失函数一般广泛应用于分类问题中"><a href="#首先是一个很简单的判别器，通过简单的MLP输出（0，1-之间的一个概率作为outputs，targets即为真实标签，交叉熵损失函数一般广泛应用于分类问题中" class="headerlink" title="首先是一个很简单的判别器，通过简单的MLP输出（0，1)之间的一个概率作为outputs，targets即为真实标签，交叉熵损失函数一般广泛应用于分类问题中"></a>首先是一个很简单的判别器，通过简单的MLP输出（0，1)之间的一个概率作为outputs，targets即为真实标签，交叉熵损失函数一般广泛应用于分类问题中</h3><div class="code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 判别器</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Discriminator</span>(nn.Module):    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):        <span class="hljs-comment"># 调用父类的构造函数，初始化父类</span>        <span class="hljs-built_in">super</span>().__init__()        <span class="hljs-comment"># 定义神经网络</span>        <span class="hljs-variable language_">self</span>.model = nn.Sequential(        nn.Linear(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>),        nn.Sigmoid(),        nn.Linear(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>),         nn.Sigmoid()        )        <span class="hljs-comment"># 创建损失函数</span>        <span class="hljs-variable language_">self</span>.loss_function = nn.MSELoss()        <span class="hljs-comment"># 创建优化器，随机梯度下降</span>        <span class="hljs-variable language_">self</span>.optimiser = torch.optim.SGD(<span class="hljs-variable language_">self</span>.parameters(), lr=<span class="hljs-number">0.01</span>)            <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, inputs</span>):        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.model(inputs)            <span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">self, inputs, targets</span>):        <span class="hljs-comment"># 计算网络的输出值</span>        outputs = <span class="hljs-variable language_">self</span>.forward(inputs)        loss = <span class="hljs-variable language_">self</span>.loss_function(outputs, targets)        <span class="hljs-comment"># 反向传播</span>        <span class="hljs-variable language_">self</span>.optimiser.zero_grad()        loss.backward()        <span class="hljs-variable language_">self</span>.optimiser.step()</code></pre></div><h3 id="然后是生成器"><a href="#然后是生成器" class="headerlink" title="然后是生成器"></a>然后是生成器</h3>]]></content>
    
    
    <categories>
      
      <category>科研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GAN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IQA之对抗鲁棒性评估</title>
    <link href="/2025/02/26/IQA%E5%AF%B9%E6%8A%97%E9%B2%81%E6%A3%92%E6%80%A7%E8%AF%84%E4%BC%B0/"/>
    <url>/2025/02/26/IQA%E5%AF%B9%E6%8A%97%E9%B2%81%E6%A3%92%E6%80%A7%E8%AF%84%E4%BC%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一-基本概念"><a href="#一-基本概念" class="headerlink" title="一.基本概念"></a>一.基本概念</h1><p>深度学习领域，鲁棒性(robustness)指的是智能系统在受到内外环境中多种不确定因素干扰时，依旧可以保持功能稳定的能力.</p><p>而对抗鲁棒性(adversarial robustness)专指对抗环境下模型抵御对抗攻击的能力</p><p>以图像分类任务为例，对抗鲁棒性就是指模型能否对对抗样本做出正确分类的能力。</p>]]></content>
    
    
    <categories>
      
      <category>科研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IQA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IQA之入门必备知识</title>
    <link href="/2025/02/26/IQA0/"/>
    <url>/2025/02/26/IQA0/</url>
    
    <content type="html"><![CDATA[<h1 id="IQA——图像质量评估"><a href="#IQA——图像质量评估" class="headerlink" title="IQA——图像质量评估"></a>IQA——图像质量评估</h1><p>图像质量是比较各种图像处理算法性能优劣以及优化系统参数的重要指标，因此在图像采集、编码压缩、网络传输等领域建立有效的图像质量评价机制具有重要的意义</p><h2 id="1-图像质量评估"><a href="#1-图像质量评估" class="headerlink" title="1.图像质量评估"></a>1.图像质量评估</h2><p>对图像进行评分，使用合适的评价指标，使得评价结果最符合人类主观评价</p><h2 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h2><p>根据有没有参与这一角度，分为主观评价和客观评价</p><h2 id="3-主观评价方法"><a href="#3-主观评价方法" class="headerlink" title="3.主观评价方法"></a>3.主观评价方法</h2><h3 id="i-绝对评价"><a href="#i-绝对评价" class="headerlink" title="i.绝对评价"></a>i.绝对评价</h3><p>评价指标是平均主观分(MOS),将待评价图像和原始图像按一定规则交替播放持续一定时间给观察者，然后在播放后留出一定的时间间隔供观察者打分，最后将所有给出的分数取平均作为该序列的评价值，即该待评图像的评价值</p><h3 id="ii-相对评价"><a href="#ii-相对评价" class="headerlink" title="ii.相对评价"></a>ii.相对评价</h3><p>评价指标是差异平均主观分（DMOS）,相对评价中没有原始图像作为参考，是由观察者对一批待评价图像进行相互比较，从而判断出每个图像的优劣顺序，并给出相应的评价值</p><h2 id="4-客观评价方法"><a href="#4-客观评价方法" class="headerlink" title="4.客观评价方法"></a>4.客观评价方法</h2><p>脱离人的主观意识判断，主要通过函数拟合或者机器学习的方法来建立一个模型，对待评图像进行相关的处理运算，得到图像的评价值.<br>分为全参考（FR）、半参考（RR）、无参考（NR）</p>]]></content>
    
    
    <categories>
      
      <category>科研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IQA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NR-IQA之对抗攻击方法</title>
    <link href="/2025/02/26/IQA%E4%B8%AD%E7%9A%84%E5%AF%B9%E6%8A%97%E6%94%BB%E5%87%BB/"/>
    <url>/2025/02/26/IQA%E4%B8%AD%E7%9A%84%E5%AF%B9%E6%8A%97%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="一-对抗攻击的相关概念"><a href="#一-对抗攻击的相关概念" class="headerlink" title="一.对抗攻击的相关概念"></a>一.对抗攻击的相关概念</h1><h2 id="1-对抗样本"><a href="#1-对抗样本" class="headerlink" title="1.对抗样本"></a>1.对抗样本</h2><h2 id="2-对抗攻击目标"><a href="#2-对抗攻击目标" class="headerlink" title="2.对抗攻击目标"></a>2.对抗攻击目标</h2><p>非目标攻击or目标攻击</p><h2 id="3-对抗攻击知识"><a href="#3-对抗攻击知识" class="headerlink" title="3.对抗攻击知识"></a>3.对抗攻击知识</h2><p>根据攻击者掌握信息的多少，分为白盒攻击、灰盒攻击、黑盒攻击</p><p>白盒攻击假设攻击者已获得关于目标模型的一切信息，如模型结构、参数、梯度、训练过程和训练数据.</p><p>黑盒攻击则假设攻击者只能访问目标模型的输出，而不能访问其内部参数和梯度信息</p><h2 id="4-对抗攻击能力"><a href="#4-对抗攻击能力" class="headerlink" title="4.对抗攻击能力"></a>4.对抗攻击能力</h2><p>诱导性攻击or探索性攻击</p><h2 id="5-模型的对抗鲁棒性"><a href="#5-模型的对抗鲁棒性" class="headerlink" title="5.模型的对抗鲁棒性"></a>5.模型的对抗鲁棒性</h2><p>指对抗环境下模型抵御对抗攻击的能力</p><h1 id="二-关于对抗样本存在的解释——为什么可以构造出对抗样本？"><a href="#二-关于对抗样本存在的解释——为什么可以构造出对抗样本？" class="headerlink" title="二.关于对抗样本存在的解释——为什么可以构造出对抗样本？"></a>二.关于对抗样本存在的解释——为什么可以构造出对抗样本？</h1><h1 id="三-不同攻击方法"><a href="#三-不同攻击方法" class="headerlink" title="三.不同攻击方法"></a>三.不同攻击方法</h1><h2 id="1-基于梯度的白盒攻击"><a href="#1-基于梯度的白盒攻击" class="headerlink" title="1.基于梯度的白盒攻击"></a>1.基于梯度的白盒攻击</h2><h2 id="2-基于优化的白盒攻击"><a href="#2-基于优化的白盒攻击" class="headerlink" title="2.基于优化的白盒攻击"></a>2.基于优化的白盒攻击</h2><h2 id="3-基于迁移的黑盒攻击"><a href="#3-基于迁移的黑盒攻击" class="headerlink" title="3.基于迁移的黑盒攻击"></a>3.基于迁移的黑盒攻击</h2><h2 id="4-基于查询的黑盒攻击"><a href="#4-基于查询的黑盒攻击" class="headerlink" title="4.基于查询的黑盒攻击"></a>4.基于查询的黑盒攻击</h2>]]></content>
    
    
    <categories>
      
      <category>科研</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IQA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫零基础学习</title>
    <link href="/2025/02/07/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/"/>
    <url>/2025/02/07/%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>暂<br>```javascript<br>// 这是一个测试代码块<br>function greet(name) {<br>  console.log(“Hello, “ + name);<br>}</p><p>greet(“Hexo”);</p>]]></content>
    
    
    <categories>
      
      <category>一些有趣的尝试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建个人博客网站的两种方法</title>
    <link href="/2025/01/19/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
    <url>/2025/01/19/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p>首先，搭建一个简易的属于自己的博客网站并不一定需要一个域名，也不一定需要一个服务器。</p>]]></content>
    
    
    <categories>
      
      <category>一些有趣的尝试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>搭建静态博客</tag>
      
      <tag>搭建动态博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
